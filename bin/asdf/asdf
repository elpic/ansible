#!/usr/bin/env bash
# This script was generated by bashly 1.0.8 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
asdf_usage() {
  if [[ -n $long_usage ]]; then
    printf "asdf - Command to install or uninstall asdf plugins and software associated\n"
    echo

  else
    printf "asdf - Command to install or uninstall asdf plugins and software associated\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  asdf COMMAND\n"
  printf "  asdf [COMMAND] --help | -h\n"
  printf "  asdf --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Install plugins and software using asdf\n" "install  "
  printf "  %s   Uninstall all plugins and software\n" "uninstall"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
asdf_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "asdf install - Install plugins and software using asdf\n"
    echo

  else
    printf "asdf install - Install plugins and software using asdf\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  asdf install\n"
  printf "  asdf install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  asdf install\n"
    echo

  fi
}

# :command.usage
asdf_uninstall_usage() {
  if [[ -n $long_usage ]]; then
    printf "asdf uninstall - Uninstall all plugins and software\n"
    echo

  else
    printf "asdf uninstall - Uninstall all plugins and software\n"
    echo

  fi

  printf "Alias: u\n"
  echo

  printf "%s\n" "Usage:"
  printf "  asdf uninstall\n"
  printf "  asdf uninstall --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/software.sh
declare -a plugin_and_versions=(
	"elixir,1.12.2"
	"elixir,1.14.3"
	"erlang,23.3"
	"ffmpeg,6.0"
	"fzf,0.32.0"
	"gcloud,422.0.0"
	"golang,1.19.1"
	"helm,3.11.2"
	"kustomize,4.5.7"
	"kustomize,5.0.0"
	"nodejs,16.16.0"
	"postgres,14.0"
	"python,2.7.18"
	"python,3.10.5"
	"python,3.9.16"
	"ruby,2.6.6"
	"ruby,2.7.6"
	"ruby,3.1.0"
	"rust,1.66.0"
	"skaffold,1.39.1"
	"skaffold,2.2.0"
	"terraform,1.3.7"
	"tmux,3.0"
	"yarn,1.22.17"
	"bun,1.0.7"
)

# This function receive a function that is going to be executed
# with every plugin in the list of plugins if a plugin was already
# in executed is not going to be executed twice
#
# $1 a function that is going to be executed for each plugin
execute_on_each_plugins() {
	declare -a unique_plugins=()

	for item in "${plugin_and_versions[@]}"; do
		plugin=$(echo "$item" | cut -d',' -f1)

		if [[ ! "${unique_plugins[*]}" =~ $plugin ]]; then
			unique_plugins+=("$plugin")
		fi
	done

	for plugin in "${unique_plugins[@]}"; do
		$1 "$plugin"
	done
}

# This function receive a function that is going to be executed
# with every plugin and the version of the software we are trying to
# install
#
# $1 a function that is going to be executed for each plugin
execute_on_each_software() {
	for item in "${plugin_and_versions[@]}"; do
		plugin=$(echo "$item" | cut -d',' -f1)
		version=$(echo "$item" | cut -d',' -f2)

		$1 "$plugin" "$version"
	done
}

# :command.command_functions
# :command.function
asdf_install_command() {
  # src/install_command.sh
  echo "Install plugins and software"

  function install_plugin() {
  	plugin=$1

  	echo " Checking if plugin: $plugin is installed"

  	if [[ $(asdf plugin list | grep -c "$plugin") -ne 1 ]]; then
  		echo " Installing plugin: $plugin"
  		asdf plugin add "$plugin"
  	else
  		echo " Skip plugin installation: $plugin"
  	fi
  }

  function install_software() {
  	plugin=$1
  	version=$2

  	echo " Checking if software: $plugin, $version is installed"

  	if [[ $(asdf list "$plugin" | grep -c "$version") -ne 1 ]]; then
  		echo " Installing software: $plugin, $version"
  		asdf install "$plugin" "$version"
  	else
  		echo " Skip software installation: $plugin, $version"
  	fi
  }

  execute_on_each_plugins install_plugin
  execute_on_each_software install_software

}

# :command.function
asdf_uninstall_command() {
  # src/uninstall_command.sh
  echo "Uninstall plugins and software"

  function uninstall_plugin() {
  	plugin=$1

  	echo " Checking if plugin: $plugin is installed"

  	if [[ $(asdf plugin list | grep -c "$plugin") -ne 1 ]]; then
  		echo " Skip plugin installation: $plugin"
  	else
  		echo "  Uninstalling plugin: $plugin"
  		asdf plugin remove "$plugin"
  	fi
  }

  function uninstall_software() {
  	plugin=$1
  	version=$2

  	echo " Checking if software: $plugin, $version is installed"

  	if [[ $(asdf list "$plugin" | grep -c "$version") -ne 1 ]]; then
  		echo " Skip software uninstall: $plugin, $version"
  	else
  		echo " Uninstalling software: $plugin, $version"
  		asdf uninstall "$plugin" "$version"
  	fi
  }

  execute_on_each_software uninstall_software
  execute_on_each_plugins uninstall_plugin

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        asdf_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    install | i)
      action="install"
      shift
      asdf_install_parse_requirements "$@"
      shift $#
      ;;

    uninstall | u)
      action="uninstall"
      shift
      asdf_uninstall_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      asdf_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
asdf_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        asdf_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
asdf_uninstall_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        asdf_uninstall_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="uninstall"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "install") asdf_install_command ;;
    "uninstall") asdf_uninstall_command ;;
  esac
}

initialize
run "$@"
